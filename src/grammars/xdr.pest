STRUCT = {"struct"}
UNION = {"union"}
NAMESPACE = {"namespace"}
CASE = {"case"}
SWITCH = {"switch"}
TYPEDEF = {"typedef"}
ENUM = {"enum"}

keywords = {
    STRUCT |
    UNION |
    NAMESPACE |
    CASE |
    SWITCH |
    TYPEDEF |
    ENUM
}


types = {
    "boolean" |
    "string" |
    "opaque" |
    "integer" |
    "unsigned integer" |
    "unsigned hyper" |
    "hyper" |
    "float" |
    "double" |
    "quad"
}

ws_no_nl = _{ " " | "\t" }
whitespace = _{ ws_no_nl | NEWLINE }
lowercase = {'a' .. 'z'}
uppercase = {'A' .. 'Z'}
alpha = { lowercase | uppercase }
num = { '0'..'9' }
alpha_num = { alpha | num }
id_char = { alpha_num | "_" }


line_comment = _{ ("//" | "%") ~ (!NEWLINE ~ ANY)* }

long_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/"}
empty_space = _{whitespace | line_comment | long_comment }

num_p = { num+ }
var_array = { "<" ~ num* ~ ">" }
fixed_array = { "[" ~ num_p ~ "]" }
array_def = { var_array | fixed_array }
identifier = { !keywords ~ alpha ~ (alpha_num | "_")* }
bracket_start = { ws_no_nl+ ~ identifier ~ whitespace* ~ "{" }
end_bracket = {"}" ~ ";"?}
single_param = { "(" ~ ws_no_nl* ~ identifier ~ ws_no_nl+ ~ identifier ~ ")" }

type_decl = { ( types | identifier ) ~ ws_no_nl+ ~ identifier ~ array_def? ~";" }
typedef = { TYPEDEF ~ whitespace+ ~ type_decl }
casedef = { type_decl | "void;" }
enum_decl = { identifier ~ ws_no_nl+ ~ "=" ~ ws_no_nl ~ num_p ~ ws_no_nl* ~ ","? }
case_statement = { CASE ~ ws_no_nl+ ~ identifier ~ ":" ~ NEWLINE ~ empty_space+ ~ casedef }
switch_body = { empty_space | case_statement }

switch = {SWITCH ~ ws_no_nl* ~ single_param ~ whitespace* ~ "{" ~ switch_body* ~ end_bracket}
union = { UNION ~ ws_no_nl+ ~ identifier ~ ws_no_nl+ ~ switch }
Struct = {STRUCT ~ bracket_start ~ (empty_space | type_decl)* ~ end_bracket }
Enum = {ENUM ~ bracket_start ~ (empty_space | enum_decl)* ~ end_bracket }
namespace = { NAMESPACE ~ bracket_start ~ (empty_space | Struct | typedef | Enum | union)* ~ end_bracket}


file = { SOI ~ (empty_space* ~ namespace ~ empty_space*)+ ~ EOI}
